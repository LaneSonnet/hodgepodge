<?xml version="1.0" encoding="GBK"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:sharding="http://shardingsphere.io/schema/shardingsphere/sharding"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
		http://shardingsphere.io/schema/shardingsphere/sharding
		http://shardingsphere.io/schema/shardingsphere/sharding/sharding.xsd"
>

	<!-- sharding jdbc分库分表 -->
	<sharding:inline-strategy id="databaseStrategy" sharding-column="id" algorithm-expression="dataSource$->{id % 2}"/>
	<sharding:inline-strategy id="userTableStrategy" sharding-column="age"
		algorithm-expression="s_user$->{age % 2}"/>

	<sharding:data-source id="dataSource">
		<sharding:sharding-rule data-source-names="dataSource0,dataSource1">
			<sharding:table-rules>
				<sharding:table-rule logic-table="s_user" actual-data-nodes="dataSource$->{0..1}.s_user$->{0..1}"
					database-strategy-ref="databaseStrategy" table-strategy-ref="userTableStrategy"/>
				<!--<sharding:table-rule logic-table="t_order_item" actual-data-nodes="ds$->{0..1}.t_order_item$->{0..1}"
					database-strategy-ref="databaseStrategy" table-strategy-ref="orderItemTableStrategy"/>-->
			</sharding:table-rules>
		</sharding:sharding-rule>
	</sharding:data-source>

	<!-- 配置Mybatis（注意classpath路径的设置） -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations" value="classpath*:com/mudfish/dao/sharding/**/*.xml"/>
		<!-- 自动配置别名 -->
		<property name="typeAliasesPackage" value="com.mudfish.dao.sharding"/>
	</bean>
	<!-- Mybatis Mapper接口数据扫描 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.mudfish.dao.sharding"/>
	</bean>

	<!-- 配置事务管理器 -->
<!--
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
		<property name="nestedTransactionAllowed" value="true"></property>
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
-->

	<context:property-placeholder location="classpath:dataSource.properties"/>
	<!-- 阿里 druid数据库连接池 -->
	<bean id="dataSource0" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}"/>
		<property name="driverClassName" value="${jdbc.driver}"/>

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.initialPoolSize}"/>
		<property name="minIdle" value="${jdbc.minPoolSize}"/>
		<property name="maxActive" value="${jdbc.maxPoolSize}"/>

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000"/>

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000"/>

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000"/>

		<property name="validationQuery" value="SELECT 'x' FROM DUAL"/>
		<property name="testWhileIdle" value="true"/>
		<property name="testOnBorrow" value="false"/>
		<property name="testOnReturn" value="false"/>

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true"/>
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

		<!-- 连接泄漏处理。Druid提供了RemoveAbandanded相关配置，用来关闭长时间不使用的连接（例如忘记关闭连接）。 -->
		<property name="removeAbandoned" value="true"/>
		<!-- 900秒，也就是15分钟 -->
		<property name="removeAbandonedTimeout" value="900"/>
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true"/>

		<!-- 配置监控统计拦截的filters, 监控统计："stat",防SQL注入："wall",组合使用： "stat,wall" -->
		<property name="filters" value="stat"/>
	</bean>

	<!-- 阿里 druid数据库连接池 -->
	<bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url1}"/>
		<property name="username" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}"/>
		<property name="driverClassName" value="${jdbc.driver}"/>

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.initialPoolSize}"/>
		<property name="minIdle" value="${jdbc.minPoolSize}"/>
		<property name="maxActive" value="${jdbc.maxPoolSize}"/>

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000"/>

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000"/>

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000"/>

		<property name="validationQuery" value="SELECT 'x' FROM DUAL"/>
		<property name="testWhileIdle" value="true"/>
		<property name="testOnBorrow" value="false"/>
		<property name="testOnReturn" value="false"/>

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true"/>
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

		<!-- 连接泄漏处理。Druid提供了RemoveAbandanded相关配置，用来关闭长时间不使用的连接（例如忘记关闭连接）。 -->
		<property name="removeAbandoned" value="true"/>
		<!-- 900秒，也就是15分钟 -->
		<property name="removeAbandonedTimeout" value="900"/>
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true"/>

		<!-- 配置监控统计拦截的filters, 监控统计："stat",防SQL注入："wall",组合使用： "stat,wall" -->
		<property name="filters" value="stat"/>
	</bean>
</beans>
